{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-08-05T11:02:17.381347Z", "invocation_id": "2f07943f-7570-4ba7-8307-e3273b600617", "env": {}, "project_id": "95d37a6eaeda6a1dbbc2150a344487a1", "user_id": "d7b0c1e1-cc6f-47cb-b495-16a6a0fac84b", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.facebook_ads_metrics.facebook_ads_main": {"raw_sql": "-- combining all the facebook ads tables to create a master table from which we create metrics \r\n-- added some key computations to the master table like cost_per_click, cost_per_impression, cost_per_conversion and click_through_rate\r\n\r\nwith account_history as (\r\n    select *\r\n    from {{ var(\"account_history\") }}\r\n), ad_history as (\r\n    select *\r\n    from {{ var(\"ad_history\") }}\r\n), ad_set_history as (\r\n    select *\r\n    from {{ var(\"ad_set_history\") }}\r\n), basic_ad as (\r\n    select *\r\n    from {{ var(\"basic_ad\") }}\r\n), campaign_history as (\r\n    select *\r\n    from {{ var(\"campaign_history\") }}\r\n), creative_history as (\r\n    select *\r\n    from {{ var(\"creative_history\") }}\r\n), ad_conversions as(\r\n    select * from {{source('facebook_ads_source','AD_CONVERSIONS')}}\r\n), source as ( \r\n    select ad_history.*, account_history.account_name, ad_set_history.ad_set_name, campaign_history.campaign_name, basic_ad.impressions, basic_ad.clicks, basic_ad.spend, basic_ad.date_day, creative_history.creative_name, creative_history.template_page_link,\r\n    (select count(*) from ad_conversions where ad_conversions.ad_id = ad_history.ad_id ) as number_of_conversions\r\n    from ad_history\r\n\r\n    left join account_history\r\n    on ad_history.account_id = account_history.account_id\r\n    left join ad_set_history\r\n    on ad_history.ad_set_id = ad_set_history.ad_set_id\r\n    left join campaign_history \r\n    on ad_history.campaign_id = campaign_history.campaign_id\r\n    left join basic_ad \r\n    on ad_history.ad_id = basic_ad.ad_id\r\n    left join creative_history\r\n    on ad_history.creative_id = creative_history.creative_id\r\n) \r\n\r\nselect *,\r\n(case when impressions is not null then cast((spend/impressions) as float) else null end) as cost_per_impression,\r\n(case when clicks is not null then cast((spend/clicks) as float) else null end) as cost_per_click,\r\n(case when number_of_conversions is not null then cast((spend/number_of_conversions) as float) else null end) as cost_per_conversion,\r\n(case when clicks is not null and impressions is not null then cast((clicks/impressions) as float) else null end) as click_through_rate\r\n\r\nfrom source", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "facebook_ads_main"], "unique_id": "model.facebook_ads_metrics.facebook_ads_main", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "facebook_ads_main.sql", "original_file_path": "models\\facebook_ads_main.sql", "name": "facebook_ads_main", "alias": "facebook_ads_main", "checksum": {"name": "sha256", "checksum": "914af74806f011a23d25d3ca2c3770ea04fdf520fa3e201faf4a4d95240894be"}, "tags": [], "refs": [["stg_facebook_ads__account_history"], ["stg_facebook_ads__ad_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__basic_ad"], ["stg_facebook_ads__campaign_history"], ["stg_facebook_ads__creative_history"]], "sources": [["facebook_ads_source", "AD_CONVERSIONS"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\facebook_ads_main.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694892.9915717, "compiled_sql": "-- combining all the facebook ads tables to create a master table from which we create metrics \n-- added some key computations to the master table like cost_per_click, cost_per_impression, cost_per_conversion and click_through_rate\n\nwith account_history as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__account_history\n), ad_history as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_history\n), ad_set_history as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_set_history\n), basic_ad as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__basic_ad\n), campaign_history as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__campaign_history\n), creative_history as (\n    select *\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__creative_history\n), ad_conversions as(\n    select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.AD_CONVERSIONS\n), source as ( \n    select ad_history.*, account_history.account_name, ad_set_history.ad_set_name, campaign_history.campaign_name, basic_ad.impressions, basic_ad.clicks, basic_ad.spend, basic_ad.date_day, creative_history.creative_name, creative_history.template_page_link,\n    (select count(*) from ad_conversions where ad_conversions.ad_id = ad_history.ad_id ) as number_of_conversions\n    from ad_history\n\n    left join account_history\n    on ad_history.account_id = account_history.account_id\n    left join ad_set_history\n    on ad_history.ad_set_id = ad_set_history.ad_set_id\n    left join campaign_history \n    on ad_history.campaign_id = campaign_history.campaign_id\n    left join basic_ad \n    on ad_history.ad_id = basic_ad.ad_id\n    left join creative_history\n    on ad_history.creative_id = creative_history.creative_id\n) \n\nselect *,\n(case when impressions is not null then cast((spend/impressions) as float) else null end) as cost_per_impression,\n(case when clicks is not null then cast((spend/clicks) as float) else null end) as cost_per_click,\n(case when number_of_conversions is not null then cast((spend/number_of_conversions) as float) else null end) as cost_per_conversion,\n(case when clicks is not null and impressions is not null then cast((clicks/impressions) as float) else null end) as click_through_rate\n\nfrom source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main"}, "model.facebook_ads_metrics.facebook_ads__monthly_ads": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ads',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ads", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ads.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ads.sql", "name": "facebook_ads__monthly_ads", "alias": "facebook_ads__monthly_ads", "checksum": {"name": "sha256", "checksum": "19a461cf17bd99b88b8d698a895e765b0f3e299f400c73c29c1abba02114921b"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.015697, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(source_query.property_to_aggregate)\n as facebook_ads__monthly_ads,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_ads, 0) as facebook_ads__monthly_ads\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ads"}, "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ads_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_id'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ads_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ads_by_ad_set_name.sql", "name": "facebook_ads__monthly_ads_by_ad_set_name", "alias": "facebook_ads__monthly_ads_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "0d238c6f378525a9122cd1cd4c9c527b59cf92aa53d204b00c186a11bdb03e7e"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ads_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0316994, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_id,\n            ad_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_id as (\n\n            select distinct ad_set_id\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_id\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_id,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(source_query.property_to_aggregate)\n as facebook_ads__monthly_ads_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_id = spine.ad_set_id\n                or source_query.ad_set_id is null and spine.ad_set_id is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_id\n        \n        , coalesce(facebook_ads__monthly_ads_by_ad_set_name, 0) as facebook_ads__monthly_ads_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ads_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ads_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_id'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ads_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ads_by_campaign_name.sql", "name": "facebook_ads__monthly_ads_by_campaign_name", "alias": "facebook_ads__monthly_ads_by_campaign_name", "checksum": {"name": "sha256", "checksum": "a49357c20543d2483ad6d60f6c210e2f6bf3f91894aeef0ab88d1146f6997a79"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ads_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.039697, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_id,\n            ad_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_id as (\n\n            select distinct campaign_id\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_id\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_id,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(source_query.property_to_aggregate)\n as facebook_ads__monthly_ads_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_id = spine.campaign_id\n                or source_query.campaign_id is null and spine.campaign_id is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_id\n        \n        , coalesce(facebook_ads__monthly_ads_by_campaign_name, 0) as facebook_ads__monthly_ads_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ads_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_clicks',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_clicks.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_clicks.sql", "name": "facebook_ads__monthly_ad_clicks", "alias": "facebook_ads__monthly_ad_clicks", "checksum": {"name": "sha256", "checksum": "c4e8a1ad3e8c9087bed96cff4af1eeda48c9de30dcbaf20a7298dddb82d41756"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_clicks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.039697, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        clicks as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_clicks,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_ad_clicks, 0) as facebook_ads__monthly_ad_clicks\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_clicks"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_clicks_by_ad_link',\r\n    grain='month',\r\n    dimensions=['template_page_link'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_link"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_clicks_by_ad_link.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_link.sql", "name": "facebook_ads__monthly_ad_clicks_by_ad_link", "alias": "facebook_ads__monthly_ad_clicks_by_ad_link", "checksum": {"name": "sha256", "checksum": "e6587290faa8bb7700189c759da74e37adb944e1d6cef9cf7e1f53a1bfa02a08"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_link.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0476973, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        template_page_link,\n            clicks as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__template_page_link as (\n\n            select distinct template_page_link\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__template_page_link\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.template_page_link,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_clicks_by_ad_link,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.template_page_link = spine.template_page_link\n                or source_query.template_page_link is null and spine.template_page_link is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , template_page_link\n        \n        , coalesce(facebook_ads__monthly_ad_clicks_by_ad_link, 0) as facebook_ads__monthly_ad_clicks_by_ad_link\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_clicks_by_ad_link"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_clicks_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_clicks_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_name.sql", "name": "facebook_ads__monthly_ad_clicks_by_ad_name", "alias": "facebook_ads__monthly_ad_clicks_by_ad_name", "checksum": {"name": "sha256", "checksum": "e65e5218db6f3b69eebaec9d07955186f67c89af03d93d80870c233daaa56964"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.055697, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            clicks as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_clicks_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_ad_clicks_by_ad_name, 0) as facebook_ads__monthly_ad_clicks_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_clicks_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_clicks_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_set"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_clicks_by_ad_set.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_set.sql", "name": "facebook_ads__monthly_ad_clicks_by_ad_set", "alias": "facebook_ads__monthly_ad_clicks_by_ad_set", "checksum": {"name": "sha256", "checksum": "8d25bd3a5bbf35d8506e07994ce418790287f89c7334ba89796748aafef3d216"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_clicks_by_ad_set.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0636978, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            clicks as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_clicks_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_ad_clicks_by_ad_set_name, 0) as facebook_ads__monthly_ad_clicks_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_clicks_by_ad_set"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_clicks_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_clicks_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_clicks_by_campaign_name.sql", "name": "facebook_ads__monthly_ad_clicks_by_campaign_name", "alias": "facebook_ads__monthly_ad_clicks_by_campaign_name", "checksum": {"name": "sha256", "checksum": "c32842832e49067c971028172141b48435b92bc74adbb969c6cbb8c08a227f0f"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_clicks_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0716999, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            clicks as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_clicks_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_ad_clicks_by_campaign_name, 0) as facebook_ads__monthly_ad_clicks_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_clicks_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_sets',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_sets"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_sets.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_sets.sql", "name": "facebook_ads__monthly_ad_sets", "alias": "facebook_ads__monthly_ad_sets", "checksum": {"name": "sha256", "checksum": "1cf52e2a8cc11d734101e79013356b56c00e12131c201dd198e4a868d5d29952"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_sets.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0797324, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(distinct source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_sets,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_ad_sets, 0) as facebook_ads__monthly_ad_sets\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_sets"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_sets_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_id'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_sets_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_sets_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_sets_by_campaign_name.sql", "name": "facebook_ads__monthly_ad_sets_by_campaign_name", "alias": "facebook_ads__monthly_ad_sets_by_campaign_name", "checksum": {"name": "sha256", "checksum": "e752275af3701ae3f53f748b4928151fd06b3b00a8d514db0a7aa762a2b7e6e5"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_sets_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0797324, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_id,\n            ad_set_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_id as (\n\n            select distinct campaign_id\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_id\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_id,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(distinct source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_sets_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_id = spine.campaign_id\n                or source_query.campaign_id is null and spine.campaign_id is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_id\n        \n        , coalesce(facebook_ads__monthly_ad_sets_by_campaign_name, 0) as facebook_ads__monthly_ad_sets_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_sets_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_spend',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_spend.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_spend.sql", "name": "facebook_ads__monthly_ad_spend", "alias": "facebook_ads__monthly_ad_spend", "checksum": {"name": "sha256", "checksum": "98e9f57bf2f31c144d607f379201ba0ff7113bbf81b35e03885818740da89af5"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_spend.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0877323, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        spend as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_spend,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_ad_spend, 0) as facebook_ads__monthly_ad_spend\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_spend"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_spend_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_spend_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_spend_by_ad_name.sql", "name": "facebook_ads__monthly_ad_spend_by_ad_name", "alias": "facebook_ads__monthly_ad_spend_by_ad_name", "checksum": {"name": "sha256", "checksum": "7170bfcc30dc5dda89f89f6da552447e2bd550eef439decfcb4c94c4f17c79a7"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_spend_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.0957327, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            spend as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_spend_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_ad_spend_by_ad_name, 0) as facebook_ads__monthly_ad_spend_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_spend_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_spend_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_spend_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_spend_by_ad_set_name.sql", "name": "facebook_ads__monthly_ad_spend_by_ad_set_name", "alias": "facebook_ads__monthly_ad_spend_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "b649e5754dda14337923cf796c19725fb325dad848f7923378bb5054dd9a8e81"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_spend_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.103733, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            spend as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_spend_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_ad_spend_by_ad_set_name, 0) as facebook_ads__monthly_ad_spend_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_spend_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_ad_spend_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_ad_spend_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_ad_spend_by_campaign_name.sql", "name": "facebook_ads__monthly_ad_spend_by_campaign_name", "alias": "facebook_ads__monthly_ad_spend_by_campaign_name", "checksum": {"name": "sha256", "checksum": "c1a722d370ea3b8e8567557d973a115f783bf575edf42271ca2479f2d3bc1123"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_ad_spend_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.11173, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            spend as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_ad_spend_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_ad_spend_by_campaign_name, 0) as facebook_ads__monthly_ad_spend_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_ad_spend_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_campaigns": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_campaigns',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_campaigns"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_campaigns", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_campaigns.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_campaigns.sql", "name": "facebook_ads__monthly_campaigns", "alias": "facebook_ads__monthly_campaigns", "checksum": {"name": "sha256", "checksum": "7f396dc5793d1de0478335ac5641ca6b10c720ff8619568051d0f2bfd111318a"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_campaigns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.119733, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_id as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    count(distinct source_query.property_to_aggregate)\n as facebook_ads__monthly_campaigns,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_campaigns, 0) as facebook_ads__monthly_campaigns\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_campaigns"}, "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_click_through_rate',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_click_through_rate.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_click_through_rate.sql", "name": "facebook_ads__monthly_click_through_rate", "alias": "facebook_ads__monthly_click_through_rate", "checksum": {"name": "sha256", "checksum": "cb458b48dc0e7ee14a31a9f1029c277dfe1306237329dcb1cf4591e7689e258a"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_click_through_rate.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.127734, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        click_through_rate as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_click_through_rate,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_click_through_rate, 0) as facebook_ads__monthly_click_through_rate\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_click_through_rate"}, "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_click_through_rate_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_click_through_rate_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_click_through_rate_by_ad_name.sql", "name": "facebook_ads__monthly_click_through_rate_by_ad_name", "alias": "facebook_ads__monthly_click_through_rate_by_ad_name", "checksum": {"name": "sha256", "checksum": "bb8837fc90e25ee8af9735ad89c1a31dc3d032c8472a4ede95ccb98561d68b0f"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_click_through_rate_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1356978, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            click_through_rate as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_click_through_rate_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_click_through_rate_by_ad_name, 0) as facebook_ads__monthly_click_through_rate_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_click_through_rate_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_click_through_rate_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_click_through_rate_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_click_through_rate_by_ad_set_name.sql", "name": "facebook_ads__monthly_click_through_rate_by_ad_set_name", "alias": "facebook_ads__monthly_click_through_rate_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "0d9beabb09a9a9025ae530f2aef73434e5bd6620d228be300e9ba663b977e406"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_click_through_rate_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1356978, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            click_through_rate as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_click_through_rate_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_click_through_rate_by_ad_set_name, 0) as facebook_ads__monthly_click_through_rate_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_click_through_rate_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_click_through_rate_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_click_through_rate_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_click_through_rate_by_campaign_name.sql", "name": "facebook_ads__monthly_click_through_rate_by_campaign_name", "alias": "facebook_ads__monthly_click_through_rate_by_campaign_name", "checksum": {"name": "sha256", "checksum": "e84fb80e2b16f8a06876e67864207fd811cf5c6b99099e6f2b8892fb905c6548"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_click_through_rate_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1516995, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            click_through_rate as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_click_through_rate_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_click_through_rate_by_campaign_name, 0) as facebook_ads__monthly_click_through_rate_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_click_through_rate_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_conversions": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_conversions',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_conversions", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_conversions.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_conversions.sql", "name": "facebook_ads__monthly_conversions", "alias": "facebook_ads__monthly_conversions", "checksum": {"name": "sha256", "checksum": "33d554cf058d9b770282845c69001e9c642f7382a249cac316674409f65d9526"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_conversions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.159911, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        number_of_conversions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_conversions,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_conversions, 0) as facebook_ads__monthly_conversions\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_conversions"}, "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_conversions_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_conversions_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_conversions_by_ad_set_name.sql", "name": "facebook_ads__monthly_conversions_by_ad_set_name", "alias": "facebook_ads__monthly_conversions_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "892be3f83c485491ce15df6fb1b4fd1f6da9142cb64495666c9e7ac18041b45a"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_conversions_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1679595, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            number_of_conversions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_conversions_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_conversions_by_ad_set_name, 0) as facebook_ads__monthly_conversions_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_conversions_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_conversions_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_conversions_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_conversions_by_campaign_name.sql", "name": "facebook_ads__monthly_conversions_by_campaign_name", "alias": "facebook_ads__monthly_conversions_by_campaign_name", "checksum": {"name": "sha256", "checksum": "899e757116665d798d2981d1f66fe58f1288d7518768d324dc290d8f23115f87"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_conversions_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1759646, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            number_of_conversions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_conversions_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_conversions_by_campaign_name, 0) as facebook_ads__monthly_conversions_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_conversions_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_click',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_click.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_click.sql", "name": "facebook_ads__monthly_cost_per_click", "alias": "facebook_ads__monthly_cost_per_click", "checksum": {"name": "sha256", "checksum": "302ab1cd33ee8f0f54f54548be0714e5cffd0419087a0a85ac6927d6a8126fe9"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_click.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1759646, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        cost_per_click as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_click,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_cost_per_click, 0) as facebook_ads__monthly_cost_per_click\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_click"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_click_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_click_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_click_by_ad_name.sql", "name": "facebook_ads__monthly_cost_per_click_by_ad_name", "alias": "facebook_ads__monthly_cost_per_click_by_ad_name", "checksum": {"name": "sha256", "checksum": "7bdddcd08f27e265b50bbb81de3f68ae25595655833ad4042d7518743d8a20db"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_click_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1839547, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            cost_per_click as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_click_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_click_by_ad_name, 0) as facebook_ads__monthly_cost_per_click_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_click_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_click_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_click_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_click_by_ad_set_name.sql", "name": "facebook_ads__monthly_cost_per_click_by_ad_set_name", "alias": "facebook_ads__monthly_cost_per_click_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "e9b3b9fa9c3b16f883ce3f38e004558f5c4df8181e79326fefafd9c2f1c46f87"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_click_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.1919758, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            cost_per_click as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_click_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_click_by_ad_set_name, 0) as facebook_ads__monthly_cost_per_click_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_click_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_click_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_click_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_click_by_campaign_name.sql", "name": "facebook_ads__monthly_cost_per_click_by_campaign_name", "alias": "facebook_ads__monthly_cost_per_click_by_campaign_name", "checksum": {"name": "sha256", "checksum": "7a2db778a2d50f5c8d41ec9d13df179b897208b4f7c838e80d3bb829cdc62139"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_click_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.199956, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            cost_per_click as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_click_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_click_by_campaign_name, 0) as facebook_ads__monthly_cost_per_click_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_click_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_conversion',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_conversion.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_conversion.sql", "name": "facebook_ads__monthly_cost_per_conversion", "alias": "facebook_ads__monthly_cost_per_conversion", "checksum": {"name": "sha256", "checksum": "89dec4108fb947492022c87f9375752202971ebafc4e09812cc9bd5c836672b3"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_conversion.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2079573, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        cost_per_conversion as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_conversion,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_cost_per_conversion, 0) as facebook_ads__monthly_cost_per_conversion\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_conversion"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_conversion_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_name.sql", "name": "facebook_ads__monthly_cost_per_conversion_by_ad_name", "alias": "facebook_ads__monthly_cost_per_conversion_by_ad_name", "checksum": {"name": "sha256", "checksum": "52a59ea905358bbd04a73df184bfc75428b63ca26fa7e02a2b21fcc33d77fa68"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.215956, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            cost_per_conversion as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_conversion_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_conversion_by_ad_name, 0) as facebook_ads__monthly_cost_per_conversion_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_conversion_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_conversion_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_set_name.sql", "name": "facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "alias": "facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "2a45d2455251cd60b30d482fff5fa82c1819f7c3a33f3d47776b9a09938502b9"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2239544, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            cost_per_conversion as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_conversion_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_conversion_by_ad_set_name, 0) as facebook_ads__monthly_cost_per_conversion_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_conversion_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_conversion_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_conversion_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_campaign_name.sql", "name": "facebook_ads__monthly_cost_per_conversion_by_campaign_name", "alias": "facebook_ads__monthly_cost_per_conversion_by_campaign_name", "checksum": {"name": "sha256", "checksum": "06fb08d6ce88edae012d9d58eaa7c8bc00a9220f4aa6e95315ec545ee407276e"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_conversion_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2239544, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            cost_per_conversion as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_conversion_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_conversion_by_campaign_name, 0) as facebook_ads__monthly_cost_per_conversion_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_conversion_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_impression',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_impression.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_impression.sql", "name": "facebook_ads__monthly_cost_per_impression", "alias": "facebook_ads__monthly_cost_per_impression", "checksum": {"name": "sha256", "checksum": "41c5af191d33d50fe92a3b50d4035d9cc9e56c63fa1a1a3151bb6e4b5248371f"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_impression.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2319558, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        cost_per_impression as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_impression,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_cost_per_impression, 0) as facebook_ads__monthly_cost_per_impression\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_impression"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_impression_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_impression_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_impression_by_ad_name.sql", "name": "facebook_ads__monthly_cost_per_impression_by_ad_name", "alias": "facebook_ads__monthly_cost_per_impression_by_ad_name", "checksum": {"name": "sha256", "checksum": "d1e3650ab3b9e2e60d59a9130bd5382fca17d6df48e07364b42982a9a1275dfd"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_impression_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.239955, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            cost_per_impression as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_impression_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_impression_by_ad_name, 0) as facebook_ads__monthly_cost_per_impression_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_impression_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_impression_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_impression_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_impression_by_ad_set_name.sql", "name": "facebook_ads__monthly_cost_per_impression_by_ad_set_name", "alias": "facebook_ads__monthly_cost_per_impression_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "49abd8657c7e73f08db226232834f06730daf47e1aad727cc379cadb92fee40d"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_impression_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.247955, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            cost_per_impression as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_impression_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_impression_by_ad_set_name, 0) as facebook_ads__monthly_cost_per_impression_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_impression_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_cost_per_impression_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_cost_per_impression_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_cost_per_impression_by_campaign_name.sql", "name": "facebook_ads__monthly_cost_per_impression_by_campaign_name", "alias": "facebook_ads__monthly_cost_per_impression_by_campaign_name", "checksum": {"name": "sha256", "checksum": "b1b44354646b84ae822da7bd7639baed69d347bdb96fd1060489e2e821dc51fa"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_cost_per_impression_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2559545, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            cost_per_impression as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    avg(source_query.property_to_aggregate)\n as facebook_ads__monthly_cost_per_impression_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_cost_per_impression_by_campaign_name, 0) as facebook_ads__monthly_cost_per_impression_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_cost_per_impression_by_campaign_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_impressions": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_impressions',\r\n    grain='month',\r\n    dimensions=[],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_impressions", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_impressions.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_impressions.sql", "name": "facebook_ads__monthly_impressions", "alias": "facebook_ads__monthly_impressions", "checksum": {"name": "sha256", "checksum": "c54aaa64a74f5d59bf33fd3d17f6a7c4ba329da9e4d32bd5c70734f6d9899238"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_impressions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2639198, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        impressions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n\nspine as (\n\n    select *\n    from spine__time\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_impressions,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n    group by 1\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , coalesce(facebook_ads__monthly_impressions, 0) as facebook_ads__monthly_impressions\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_impressions"}, "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_impressions_by_ad_name',\r\n    grain='month',\r\n    dimensions=['ad_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_ad_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_impressions_by_ad_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_impressions_by_ad_name.sql", "name": "facebook_ads__monthly_impressions_by_ad_name", "alias": "facebook_ads__monthly_impressions_by_ad_name", "checksum": {"name": "sha256", "checksum": "958d3b73fcf082ac5707b7a7cc972c0f22ea6552b8110da904e29e6fbba7d31a"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_impressions_by_ad_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2639198, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_name,\n            impressions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_name as (\n\n            select distinct ad_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_impressions_by_ad_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_name = spine.ad_name\n                or source_query.ad_name is null and spine.ad_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_name\n        \n        , coalesce(facebook_ads__monthly_impressions_by_ad_name, 0) as facebook_ads__monthly_impressions_by_ad_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_impressions_by_ad_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_impressions_by_ad_set_name',\r\n    grain='month',\r\n    dimensions=['ad_set_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_ad_set_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_impressions_by_ad_set_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_impressions_by_ad_set_name.sql", "name": "facebook_ads__monthly_impressions_by_ad_set_name", "alias": "facebook_ads__monthly_impressions_by_ad_set_name", "checksum": {"name": "sha256", "checksum": "4d5d32b7c9b4264400523394678dbee0c2a779c2d2ccaa8fa338326b7811be6d"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_impressions_by_ad_set_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.271921, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        ad_set_name,\n            impressions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__ad_set_name as (\n\n            select distinct ad_set_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__ad_set_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.ad_set_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_impressions_by_ad_set_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.ad_set_name = spine.ad_set_name\n                or source_query.ad_set_name is null and spine.ad_set_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , ad_set_name\n        \n        , coalesce(facebook_ads__monthly_impressions_by_ad_set_name, 0) as facebook_ads__monthly_impressions_by_ad_set_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_impressions_by_ad_set_name"}, "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": {"raw_sql": "-- depends_on: {{ ref('facebook_ads_main') }}\r\n\r\n\r\n\r\n\r\n{{ config(materialized = 'table') }}\r\n\r\nselect *\r\nfrom {{ metrics.metric(\r\n    metric_name='facebook_ads__monthly_impressions_by_campaign_name',\r\n    grain='month',\r\n    dimensions=['campaign_name'],\r\n    secondary_calculations=[]\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric"], "nodes": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_campaign_name"], "unique_id": "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\facebook_ads__monthly_impressions_by_campaign_name.sql", "original_file_path": "models\\metrics\\facebook_ads__monthly_impressions_by_campaign_name.sql", "name": "facebook_ads__monthly_impressions_by_campaign_name", "alias": "facebook_ads__monthly_impressions_by_campaign_name", "checksum": {"name": "sha256", "checksum": "ca17ab0b58cadc7c68a885f2a5982ca64b46effa4294aa11daf518508e658a41"}, "tags": [], "refs": [["facebook_ads_main"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_metrics\\models\\metrics\\facebook_ads__monthly_impressions_by_campaign_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.2799551, "compiled_sql": "-- depends_on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n\n\n\n\n\n\nselect *\nfrom -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n    (with source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast(date_trunc('day', cast(date_day as date)) as date) as date_day,\n        \n        campaign_name,\n            impressions as property_to_aggregate\n\n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads_main\n    where 1=1\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_month as period, \n        \n        \n        date_day\n     from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar\n ),\n          \n        spine__values__campaign_name as (\n\n            select distinct campaign_name\n            from source_query\n\n        ),  \n    \n\nspine as (\n\n    select *\n    from spine__time\n            cross join spine__values__campaign_name\n\n),\n\njoined as (\n    select \n        spine.period,\n        \n        \n        spine.campaign_name,\n        \n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n    sum(source_query.property_to_aggregate)\n as facebook_ads__monthly_impressions_by_campaign_name,\n        boolor_agg(source_query.date_day is not null) as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    \n            and (  source_query.campaign_name = spine.campaign_name\n                or source_query.campaign_name is null and spine.campaign_name is null\n            )\n    \n    group by 1, 2\n\n),\n\nbounded as (\n    select \n        *,\n         min(case when has_data then period end) over ()  as lower_bound,\n         max(case when has_data then period end) over ()  as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        \n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        \n        , campaign_name\n        \n        , coalesce(facebook_ads__monthly_impressions_by_campaign_name, 0) as facebook_ads__monthly_impressions_by_campaign_name\n        \n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by 1, 2\n)\n\nselect * from final\n\n) metric_subq", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.facebook_ads__monthly_impressions_by_campaign_name"}, "model.facebook_ads_source.stg_facebook_ads__account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__account_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__account_history.sql", "original_file_path": "models\\stg_facebook_ads__account_history.sql", "name": "stg_facebook_ads__account_history", "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "245b808f02f27b223acce2c393df93b9089346a2dfec021eeaaf9ab438d11157"}, "tags": [], "refs": [["stg_facebook_ads__account_history_tmp"], ["stg_facebook_ads__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.920746, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__account_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_status\n    \n as \n    \n    account_status\n    \n, \n    \n    \n    age\n    \n as \n    \n    age\n    \n, \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_agency_representing_client\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_client_based_in_france\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_country_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_email_address\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_postal_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_province\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_street\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_street_2\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_has_written_mandate_from_advertiser\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_is_client_paying_invoices\n    \n , \n    \n    \n    amount_spent\n    \n as \n    \n    amount_spent\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    business_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_country_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_created_by\n    \n , \n    cast(null as \n    timestamp_ntz\n) as \n    \n    business_manager_created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    business_manager_manager_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_primary_page\n    \n , \n    cast(null as \n    int\n) as \n    \n    business_manager_timezone_id\n    \n , \n    cast(null as \n    timestamp_ntz\n) as \n    \n    business_manager_update_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_updated_by\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_street\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_street_2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_zip\n    \n , \n    \n    \n    can_create_brand_lift_study\n    \n as \n    \n    can_create_brand_lift_study\n    \n, \n    \n    \n    capabilities\n    \n as \n    \n    capabilities\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    disable_reason\n    \n as \n    \n    disable_reason\n    \n, \n    \n    \n    end_advertiser\n    \n as \n    \n    end_advertiser\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    end_advertiser_name\n    \n , \n    \n    \n    has_migrated_permissions\n    \n as \n    \n    has_migrated_permissions\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    io_number\n    \n as \n    \n    io_number\n    \n, \n    \n    \n    is_attribution_spec_system_default\n    \n as \n    \n    is_attribution_spec_system_default\n    \n, \n    \n    \n    is_direct_deals_enabled\n    \n as \n    \n    is_direct_deals_enabled\n    \n, \n    \n    \n    is_notifications_enabled\n    \n as \n    \n    is_notifications_enabled\n    \n, \n    \n    \n    is_personal\n    \n as \n    \n    is_personal\n    \n, \n    \n    \n    is_prepay_account\n    \n as \n    \n    is_prepay_account\n    \n, \n    \n    \n    is_tax_id_required\n    \n as \n    \n    is_tax_id_required\n    \n, \n    \n    \n    media_agency\n    \n as \n    \n    media_agency\n    \n, \n    \n    \n    min_campaign_group_spend_cap\n    \n as \n    \n    min_campaign_group_spend_cap\n    \n, \n    \n    \n    min_daily_budget\n    \n as \n    \n    min_daily_budget\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    next_bill_date\n    \n as \n    \n    next_bill_date\n    \n, \n    cast(null as boolean) as \n    \n    offsite_pixels_tos_accepted\n    \n , \n    \n    \n    owner\n    \n as \n    \n    owner\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    salesforce_invoice_group_id\n    \n as \n    \n    salesforce_invoice_group_id\n    \n, \n    \n    \n    spend_cap\n    \n as \n    \n    spend_cap\n    \n, \n    \n    \n    tax_id\n    \n as \n    \n    tax_id\n    \n, \n    \n    \n    tax_id_status\n    \n as \n    \n    tax_id_status\n    \n, \n    \n    \n    tax_id_type\n    \n as \n    \n    tax_id_type\n    \n, \n    \n    \n    timezone_id\n    \n as \n    \n    timezone_id\n    \n, \n    \n    \n    timezone_name\n    \n as \n    \n    timezone_name\n    \n, \n    \n    \n    timezone_offset_hours_utc\n    \n as \n    \n    timezone_offset_hours_utc\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__account_history"}, "model.facebook_ads_source.stg_facebook_ads__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__ad_history.sql", "original_file_path": "models\\stg_facebook_ads__ad_history.sql", "name": "stg_facebook_ads__ad_history", "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "33bcef2482cf9b7b791d788af5cfbcd29caae94b03cc4bda011342bacaa6c914"}, "tags": [], "refs": [["stg_facebook_ads__ad_history_tmp"], ["stg_facebook_ads__ad_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.920746, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ad_set_id\n    \n as \n    \n    ad_set_id\n    \n, \n    \n    \n    ad_source_id\n    \n as \n    \n    ad_source_id\n    \n, \n    \n    \n    bid_amount\n    \n as \n    \n    bid_amount\n    \n, \n    cast(null as \n    int\n) as \n    \n    bid_info_actions\n    \n , \n    \n    \n    bid_type\n    \n as \n    \n    bid_type\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    creative_id\n    \n as \n    \n    creative_id\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    global_discriminatory_practices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    global_non_functional_landing_page\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    global_use_of_our_brand_assets\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_updated_by_app_id\n    \n as \n    \n    last_updated_by_app_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_discriminatory_practices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_non_functional_landing_page\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_use_of_our_brand_assets\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_instagram_discriminatory_practices\n    \n , \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_history"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_set_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_set_history_tmp')),\n                staging_columns=get_ad_set_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_set_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_set_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__ad_set_history.sql", "original_file_path": "models\\stg_facebook_ads__ad_set_history.sql", "name": "stg_facebook_ads__ad_set_history", "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "c2280a510952f0a75838ea19362c3b5ed1488df69d668ec60bd700200d26146a"}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history_tmp"], ["stg_facebook_ads__ad_set_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook ad set.", "columns": {"ad_set_id": {"name": "ad_set_id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__ad_set_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.92875, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_set_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as \n    int\n) as \n    \n    adset_source_id\n    \n , \n    \n    \n    bid_amount\n    \n as \n    \n    bid_amount\n    \n, \n    cast(null as \n    int\n) as \n    \n    bid_info_actions\n    \n , \n    \n    \n    bid_strategy\n    \n as \n    \n    bid_strategy\n    \n, \n    \n    \n    billing_event\n    \n as \n    \n    billing_event\n    \n, \n    \n    \n    budget_remaining\n    \n as \n    \n    budget_remaining\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    daily_budget\n    \n as \n    \n    daily_budget\n    \n, \n    \n    \n    destination_type\n    \n as \n    \n    destination_type\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    instagram_actor_id\n    \n as \n    \n    instagram_actor_id\n    \n, \n    \n    \n    lifetime_budget\n    \n as \n    \n    lifetime_budget\n    \n, \n    \n    \n    lifetime_imps\n    \n as \n    \n    lifetime_imps\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    optimization_goal\n    \n as \n    \n    optimization_goal\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_application_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_custom_event_type\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_event_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_object_store_url\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_offer_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_page_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_pixel_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_place_page_set_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_product_catalog_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_product_set_id\n    \n , \n    \n    \n    recurring_budget_semantics\n    \n as \n    \n    recurring_budget_semantics\n    \n, \n    \n    \n    rf_prediction_id\n    \n as \n    \n    rf_prediction_id\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as \n    int\n) as \n    \n    targeting_age_max\n    \n , \n    cast(null as \n    int\n) as \n    \n    targeting_age_min\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_app_install_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_audience_network_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_college_years\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_device_platforms\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_majors\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_schools\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_statuses\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_effective_audience_network_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_publisher_categories\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_publisher_list_ids\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_user_device\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_exclusions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_facebook_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_flexible_spec\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_friends_of_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_geo_locations_countries\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_geo_locations_location_types\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_instagram_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_locales\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_publisher_platforms\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_adclusters\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_device\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_os\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_wireless_carrier\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_work_employers\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_work_positions\n    \n , \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n, \n    \n    \n    use_new_app_click\n    \n as \n    \n    use_new_app_click\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_set_history"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__basic_ad_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__basic_ad_tmp')),\n                staging_columns=get_basic_ad_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_basic_ad_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__basic_ad"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__basic_ad.sql", "original_file_path": "models\\stg_facebook_ads__basic_ad.sql", "name": "stg_facebook_ads__basic_ad", "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "027a6dcd9090806d456a02a7637e4d39fc83d8edb5f33f8f8c85e498c992e86a"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad_tmp"], ["stg_facebook_ads__basic_ad_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__basic_ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.9367464, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__basic_ad_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ad_id\n    \n as \n    \n    ad_id\n    \n, \n    \n    \n    ad_name\n    \n as \n    \n    ad_name\n    \n, \n    \n    \n    adset_name\n    \n as \n    \n    adset_name\n    \n, \n    \n    \n    cpc\n    \n as \n    \n    cpc\n    \n, \n    \n    \n    cpm\n    \n as \n    \n    cpm\n    \n, \n    \n    \n    ctr\n    \n as \n    \n    ctr\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    frequency\n    \n as \n    \n    frequency\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    inline_link_clicks\n    \n as \n    \n    inline_link_clicks\n    \n, \n    cast(null as \n    int\n) as \n    \n    reach\n    \n , \n    \n    \n    spend\n    \n as \n    \n    spend\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__basic_ad"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__campaign_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__campaign_history.sql", "original_file_path": "models\\stg_facebook_ads__campaign_history.sql", "name": "stg_facebook_ads__campaign_history", "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "a6d89567bc6b46074191adc36db46e6a84280697789ba33ddc5faeb56707284f"}, "tags": [], "refs": [["stg_facebook_ads__campaign_history_tmp"], ["stg_facebook_ads__campaign_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.92875, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__campaign_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    boosted_object_id\n    \n as \n    \n    boosted_object_id\n    \n, \n    \n    \n    budget_rebalance_flag\n    \n as \n    \n    budget_rebalance_flag\n    \n, \n    \n    \n    buying_type\n    \n as \n    \n    buying_type\n    \n, \n    \n    \n    can_create_brand_lift_study\n    \n as \n    \n    can_create_brand_lift_study\n    \n, \n    \n    \n    can_use_spend_cap\n    \n as \n    \n    can_use_spend_cap\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    daily_budget\n    \n as \n    \n    daily_budget\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    objective\n    \n as \n    \n    objective\n    \n, \n    \n    \n    source_campaign_id\n    \n as \n    \n    source_campaign_id\n    \n, \n    \n    \n    spend_cap\n    \n as \n    \n    spend_cap\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    stop_time\n    \n as \n    \n    stop_time\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__campaign_history"}, "model.facebook_ads_source.stg_facebook_ads__creative_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__creative_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__creative_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "stg_facebook_ads__creative_history.sql", "original_file_path": "models\\stg_facebook_ads__creative_history.sql", "name": "stg_facebook_ads__creative_history", "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c74654b447b4ca1e0d10f1e5fb025312f0458f8b7683433cebd25a9d95f67bdc"}, "tags": [], "refs": [["stg_facebook_ads__creative_history_tmp"], ["stg_facebook_ads__creative_history_tmp"]], "sources": [], "metrics": [], "description": "Each record in this table reflects a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "Link for the page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models\\stg_facebook_ads.yml", "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1659694893.9367464, "compiled_sql": "with base as (\n\n    select * \n    from HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__creative_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp_ntz\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    applink_treatment\n    \n as \n    \n    applink_treatment\n    \n, \n    \n    \n    asset_feed_spec_link_urls\n    \n as \n    \n    asset_feed_spec_link_urls\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    branded_content_sponsor_page_id\n    \n as \n    \n    branded_content_sponsor_page_id\n    \n, \n    \n    \n    call_to_action_type\n    \n as \n    \n    call_to_action_type\n    \n, \n    \n    \n    carousel_ad_link\n    \n as \n    \n    carousel_ad_link\n    \n, \n    \n    \n    effective_instagram_story_id\n    \n as \n    \n    effective_instagram_story_id\n    \n, \n    \n    \n    effective_object_story_id\n    \n as \n    \n    effective_object_story_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    image_file\n    \n as \n    \n    image_file\n    \n, \n    \n    \n    image_hash\n    \n as \n    \n    image_hash\n    \n, \n    \n    \n    image_url\n    \n as \n    \n    image_url\n    \n, \n    \n    \n    instagram_actor_id\n    \n as \n    \n    instagram_actor_id\n    \n, \n    \n    \n    instagram_permalink_url\n    \n as \n    \n    instagram_permalink_url\n    \n, \n    \n    \n    instagram_story_id\n    \n as \n    \n    instagram_story_id\n    \n, \n    \n    \n    link_og_id\n    \n as \n    \n    link_og_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    object_id\n    \n as \n    \n    object_id\n    \n, \n    \n    \n    object_story_id\n    \n as \n    \n    object_story_id\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_android\n    \n as \n    \n    object_story_link_data_app_link_spec_android\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_ios\n    \n as \n    \n    object_story_link_data_app_link_spec_ios\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_ipad\n    \n as \n    \n    object_story_link_data_app_link_spec_ipad\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_iphone\n    \n as \n    \n    object_story_link_data_app_link_spec_iphone\n    \n, \n    \n    \n    object_story_link_data_caption\n    \n as \n    \n    object_story_link_data_caption\n    \n, \n    \n    \n    object_story_link_data_child_attachments\n    \n as \n    \n    object_story_link_data_child_attachments\n    \n, \n    \n    \n    object_story_link_data_description\n    \n as \n    \n    object_story_link_data_description\n    \n, \n    \n    \n    object_story_link_data_link\n    \n as \n    \n    object_story_link_data_link\n    \n, \n    \n    \n    object_story_link_data_message\n    \n as \n    \n    object_story_link_data_message\n    \n, \n    \n    \n    object_type\n    \n as \n    \n    object_type\n    \n, \n    \n    \n    object_url\n    \n as \n    \n    object_url\n    \n, \n    \n    \n    page_link\n    \n as \n    \n    page_link\n    \n, \n    \n    \n    page_message\n    \n as \n    \n    page_message\n    \n, \n    \n    \n    product_set_id\n    \n as \n    \n    product_set_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    template_app_link_spec_android\n    \n as \n    \n    template_app_link_spec_android\n    \n, \n    \n    \n    template_app_link_spec_ios\n    \n as \n    \n    template_app_link_spec_ios\n    \n, \n    \n    \n    template_app_link_spec_ipad\n    \n as \n    \n    template_app_link_spec_ipad\n    \n, \n    \n    \n    template_app_link_spec_iphone\n    \n as \n    \n    template_app_link_spec_iphone\n    \n, \n    \n    \n    template_caption\n    \n as \n    \n    template_caption\n    \n, \n    \n    \n    template_child_attachments\n    \n as \n    \n    template_child_attachments\n    \n, \n    \n    \n    template_description\n    \n as \n    \n    template_description\n    \n, \n    \n    \n    template_link\n    \n as \n    \n    template_link\n    \n, \n    \n    \n    template_message\n    \n as \n    \n    template_message\n    \n, \n    \n    \n    template_page_link\n    \n as \n    \n    template_page_link\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    template_url\n    \n , \n    \n    \n    thumbnail_url\n    \n as \n    \n    thumbnail_url\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    url_tags\n    \n as \n    \n    url_tags\n    \n, \n    \n    \n    use_page_actor_override\n    \n as \n    \n    use_page_actor_override\n    \n, \n    \n    \n    video_call_to_action_value_link\n    \n as \n    \n    video_call_to_action_value_link\n    \n, \n    cast(null as \n    int\n) as \n    \n    video_id\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__creative_history"}, "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": {"raw_sql": "select * from {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.account_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__account_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__account_history_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__account_history_tmp.sql", "name": "stg_facebook_ads__account_history_tmp", "alias": "stg_facebook_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "32a3a39947f962fa98285ef5da42266cc9597e61549d28313917111c3d05c4b8"}, "tags": [], "refs": [], "sources": [["facebook_ads", "account_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.6324425, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.account_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__account_history_tmp"}, "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": {"raw_sql": "select * from {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__ad_history_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__ad_history_tmp.sql", "name": "stg_facebook_ads__ad_history_tmp", "alias": "stg_facebook_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "66cb949cc32efc487c35c6ac049d29c76f364430c092c270a81ce248776e8435"}, "tags": [], "refs": [], "sources": [["facebook_ads", "ad_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.640443, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.ad_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_history_tmp"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": {"raw_sql": "select * from {{ var('ad_set_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.ad_set_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_set_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__ad_set_history_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__ad_set_history_tmp.sql", "name": "stg_facebook_ads__ad_set_history_tmp", "alias": "stg_facebook_ads__ad_set_history_tmp", "checksum": {"name": "sha256", "checksum": "bf29e75751968ebb5e1d9847450d391fb0d3aa4801f83750addf2d44803f338f"}, "tags": [], "refs": [], "sources": [["facebook_ads", "ad_set_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__ad_set_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.6484442, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.ad_set_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_set_history_tmp"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": {"raw_sql": "select * from {{ var('basic_ad') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.basic_ad"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__basic_ad_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__basic_ad_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__basic_ad_tmp.sql", "name": "stg_facebook_ads__basic_ad_tmp", "alias": "stg_facebook_ads__basic_ad_tmp", "checksum": {"name": "sha256", "checksum": "5a633882c5a43613ac72ce170100d435aa265b69fbc861654170386ae3f453b7"}, "tags": [], "refs": [], "sources": [["facebook_ads", "basic_ad"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__basic_ad_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.6564448, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.basic_ad", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__basic_ad_tmp"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": {"raw_sql": "select * from {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__campaign_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__campaign_history_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__campaign_history_tmp.sql", "name": "stg_facebook_ads__campaign_history_tmp", "alias": "stg_facebook_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "f713d6482194a258d74381dc5fee6600c579709da850acb3f90d6c4fd5e98ebc"}, "tags": [], "refs": [], "sources": [["facebook_ads", "campaign_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.6644757, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.campaign_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__campaign_history_tmp"}, "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": {"raw_sql": "select * from {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.facebook_ads_source.facebook_ads.creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__creative_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "tmp\\stg_facebook_ads__creative_history_tmp.sql", "original_file_path": "models\\tmp\\stg_facebook_ads__creative_history_tmp.sql", "name": "stg_facebook_ads__creative_history_tmp", "alias": "stg_facebook_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9739630c2ad58df6c8af45b975184033f33d253995965dbbeec7cdfb859356b9"}, "tags": [], "refs": [], "sources": [["facebook_ads", "creative_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\tmp\\stg_facebook_ads__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1659694893.6724794, "compiled_sql": "select * from HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.creative_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__creative_history_tmp"}, "model.metrics.dbt_metrics_default_calendar": {"raw_sql": "{{ config(materialized='table') }}\n\nwith days as (\n    {{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"cast('2010-01-01' as date)\",\n    end_date=\"cast('2030-01-01' as date)\"\n   )\n    }}\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast({{ dbt_utils.date_trunc('week', 'date_day') }} as date) as date_week,\n        cast({{ dbt_utils.date_trunc('month', 'date_day') }} as date) as date_month,\n        cast({{ dbt_utils.date_trunc('quarter', 'date_day') }} as date) as date_quarter,\n        cast({{ dbt_utils.date_trunc('year', 'date_day') }} as date) as date_year\n    from days\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_utils.date_trunc"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED", "fqn": ["metrics", "dbt_metrics_default_calendar"], "unique_id": "model.metrics.dbt_metrics_default_calendar", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "dbt_metrics_default_calendar.sql", "original_file_path": "models\\dbt_metrics_default_calendar.sql", "name": "dbt_metrics_default_calendar", "alias": "dbt_metrics_default_calendar", "checksum": {"name": "sha256", "checksum": "d075b848564ef9dec2fbc519fc651567240f496e37edabeccd96fb7f38888018"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\metrics\\models\\dbt_metrics_default_calendar.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1659694893.6884484, "compiled_sql": "\n\nwith days as (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 7305\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2010-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast(date_trunc('week', date_day) as date) as date_week,\n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('quarter', date_day) as date) as date_quarter,\n        cast(date_trunc('year', date_day) as date) as date_year\n    from days\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED.dbt_metrics_default_calendar"}, "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__account_history_account_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "not_null_stg_facebook_ads__account_history_account_id.sql", "original_file_path": "models\\stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__account_history_account_id", "alias": "not_null_stg_facebook_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads.yml\\not_null_stg_facebook_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1659694893.944708, "compiled_sql": "\n    \n    \n\n\n\nselect account_id\nfrom HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__account_history\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_facebook_ads__account_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_history_ad_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_history_ad_id.sql", "original_file_path": "models\\stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_history_ad_id", "alias": "not_null_stg_facebook_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads.yml\\not_null_stg_facebook_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1659694893.9527414, "compiled_sql": "\n    \n    \n\n\n\nselect ad_id\nfrom HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_history\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_facebook_ads__ad_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_set_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_set_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_set_history_ad_set_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "original_file_path": "models\\stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "alias": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads.yml\\not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1659694893.9527414, "compiled_sql": "\n    \n    \n\n\n\nselect ad_set_id\nfrom HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__ad_set_history\nwhere ad_set_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_set_id", "file_key_name": "models.stg_facebook_ads__ad_set_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__campaign_history_campaign_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "original_file_path": "models\\stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__campaign_history_campaign_id", "alias": "not_null_stg_facebook_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads.yml\\not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1659694893.9527414, "compiled_sql": "\n    \n    \n\n\n\nselect campaign_id\nfrom HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__campaign_history\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_facebook_ads__campaign_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "HOUSEWARE_HOUSEWARE", "schema": "FACEBOOK_ADS_TRANSFORMED_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__creative_history_creative_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "not_null_stg_facebook_ads__creative_history_creative_id.sql", "original_file_path": "models\\stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__creative_history_creative_id", "alias": "not_null_stg_facebook_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\facebook_ads_source\\models\\stg_facebook_ads.yml\\not_null_stg_facebook_ads__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1659694893.9527414, "compiled_sql": "\n    \n    \n\n\n\nselect creative_id\nfrom HOUSEWARE_HOUSEWARE.FACEBOOK_ADS_TRANSFORMED_stg_facebook_ads.stg_facebook_ads__creative_history\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_facebook_ads__creative_history"}}, "sources": {"source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS": {"fqn": ["facebook_ads_metrics", "facebook_ads_source", "AD_CONVERSIONS"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "AD_CONVERSIONS", "source_name": "facebook_ads_source", "source_description": "", "loader": "", "identifier": "AD_CONVERSIONS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.AD_CONVERSIONS", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.account_history": {"fqn": ["facebook_ads_source", "facebook_ads", "account_history"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.account_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "account_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad account.", "columns": {"id": {"name": "id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.account_history", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.ad_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_history"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.ad_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "ad_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad.", "columns": {"id": {"name": "id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.ad_history", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.ad_set_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_set_history"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.ad_set_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "ad_set_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_set_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad set.", "columns": {"id": {"name": "id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.ad_set_history", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.basic_ad": {"fqn": ["facebook_ads_source", "facebook_ads", "basic_ad"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.basic_ad", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "basic_ad", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "basic_ad", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inline_link_clicks": {"name": "inline_link_clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.basic_ad", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.campaign_history": {"fqn": ["facebook_ads_source", "facebook_ads", "campaign_history"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.campaign_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "campaign_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.campaign_history", "created_at": 1659694893.9607506}, "source.facebook_ads_source.facebook_ads.creative_history": {"fqn": ["facebook_ads_source", "facebook_ads", "creative_history"], "database": "HOUSEWARE_HOUSEWARE", "schema": "TEST_FACEBOOK_ADS", "unique_id": "source.facebook_ads_source.facebook_ads.creative_history", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "models\\src_facebook_ads.yml", "original_file_path": "models\\src_facebook_ads.yml", "name": "creative_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "URL destination of Facebook ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HOUSEWARE_HOUSEWARE.TEST_FACEBOOK_ADS.creative_history", "created_at": 1659694893.9607506}}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.303628}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.303628}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.303628}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.311628}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.319628}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3276284}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3276284}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3276284}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3276284}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3356292}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3356292}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3356292}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3356292}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.343596}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.343596}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.343596}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3516347}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3596282}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3676295}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3756335}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3836296}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.3916287}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.399629}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.399629}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.399629}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.399629}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.399629}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4076288}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.41563}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.423629}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.423629}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.423629}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.423629}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.423629}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.43163}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4396293}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4476285}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4476285}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4476285}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4476285}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4476285}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4556284}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4636307}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4716282}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4796278}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4876285}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4876285}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4876285}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4956284}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4956284}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4956284}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4956284}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.4956284}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5036104}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5116296}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5196273}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5196273}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.527629}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5356367}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5462923}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5518386}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5598848}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5598848}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5598848}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5598848}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5678842}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5758855}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5758855}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.583884}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.591881}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.591881}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.591881}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.5998836}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6078832}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6078832}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6078832}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6078832}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.610826}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6163383}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6243472}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6323833}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.640348}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\codegen", "path": "macros\\generate_base_model.sql", "original_file_path": "macros\\generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6483817}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6483817}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6483817}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.656381}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6643808}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.672379}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6803808}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.6883812}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.696384}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7043648}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7123826}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7203784}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7203784}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7203784}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7203784}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7203784}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7283819}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7363813}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7443807}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7524238}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7603817}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7683823}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7683823}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7683823}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7763817}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7843513}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.7923474}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8003469}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8163784}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8163784}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8163784}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8163784}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8243806}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8323464}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8323464}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8323464}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8323464}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8403459}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8483453}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8483453}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8483453}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8483453}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8563468}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8563468}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8563468}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8563468}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.864346}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.864346}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.864346}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.864346}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.864346}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8723462}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8803456}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8883464}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8883464}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8883464}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8883464}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8883464}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8963456}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8963456}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.8963456}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9043455}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9123461}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9123461}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9203458}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9285774}, "macro.facebook_ads_source.get_account_history_columns": {"unique_id": "macro.facebook_ads_source.get_account_history_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_account_history_columns.sql", "original_file_path": "macros\\get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"age\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"agency_client_declaration_agency_representing_client\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_based_in_france\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_email_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_has_written_mandate_from_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_is_client_paying_invoices\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_spent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_manager_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_primary_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_update_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_updated_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"capabilities\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"disable_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_advertiser_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"has_migrated_permissions\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"io_number\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_attribution_spec_system_default\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_direct_deals_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_notifications_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_personal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_prepay_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_tax_id_required\", \"datatype\": \"boolean\"},\n    {\"name\": \"media_agency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_campaign_group_spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"next_bill_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"offsite_pixels_tos_accepted\", \"datatype\": \"boolean\"},\n    {\"name\": \"owner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"partner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"salesforce_invoice_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timezone_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_offset_hours_utc\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9765902}, "macro.facebook_ads_source.get_ad_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_history_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_ad_history_columns.sql", "original_file_path": "macros\\get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_updated_by_app_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_instagram_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694891.9845862}, "macro.facebook_ads_source.get_ad_set_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_set_history_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_ad_set_history_columns.sql", "original_file_path": "macros\\get_ad_set_history_columns.sql", "name": "get_ad_set_history_columns", "macro_sql": "{% macro get_ad_set_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"adset_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_strategy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_event\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"budget_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"destination_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_imps\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_application_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_custom_event_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_event_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_object_store_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_offer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_pixel_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_place_page_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_catalog_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"recurring_budget_semantics\", \"datatype\": \"boolean\"},\n    {\"name\": \"rf_prediction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_age_max\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_age_min\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_app_install_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_college_years\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_device_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_majors\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_schools\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_statuses\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_effective_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_categories\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_list_ids\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_exclusions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_facebook_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_flexible_spec\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_friends_of_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_countries\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_location_types\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_instagram_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_locales\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_publisher_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_adclusters\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_wireless_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_employers\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"use_new_app_click\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0005844}, "macro.facebook_ads_source.get_basic_ad_columns": {"unique_id": "macro.facebook_ads_source.get_basic_ad_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_basic_ad_columns.sql", "original_file_path": "macros\\get_basic_ad_columns.sql", "name": "get_basic_ad_columns", "macro_sql": "{% macro get_basic_ad_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"adset_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"inline_link_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0005844}, "macro.facebook_ads_source.get_campaign_history_columns": {"unique_id": "macro.facebook_ads_source.get_campaign_history_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_campaign_history_columns.sql", "original_file_path": "macros\\get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"boosted_object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_rebalance_flag\", \"datatype\": \"boolean\"},\n    {\"name\": \"buying_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"can_use_spend_cap\", \"datatype\": \"boolean\"},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stop_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0088687}, "macro.facebook_ads_source.get_creative_history_columns": {"unique_id": "macro.facebook_ads_source.get_creative_history_columns", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "macros\\get_creative_history_columns.sql", "original_file_path": "macros\\get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"applink_treatment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"asset_feed_spec_link_urls\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"branded_content_sponsor_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"call_to_action_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"carousel_ad_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"image_file\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_hash\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_permalink_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_og_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"thumbnail_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_tags\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"use_page_actor_override\", \"datatype\": \"boolean\"},\n    {\"name\": \"video_call_to_action_value_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"video_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\add_dbt_source_relation.sql", "original_file_path": "macros\\add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\add_pass_through_columns.sql", "original_file_path": "macros\\add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\array_agg.sql", "original_file_path": "macros\\array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\array_agg.sql", "original_file_path": "macros\\array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\array_agg.sql", "original_file_path": "macros\\array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0251026}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\calculated_fields.sql", "original_file_path": "macros\\calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\ceiling.sql", "original_file_path": "macros\\ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\ceiling.sql", "original_file_path": "macros\\ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\ceiling.sql", "original_file_path": "macros\\ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\collect_freshness.sql", "original_file_path": "macros\\collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\collect_freshness.sql", "original_file_path": "macros\\collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.033103}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\dummy_coalesce_value.sql", "original_file_path": "macros\\dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0412164}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\empty_variable_warning.sql", "original_file_path": "macros\\empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0412164}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\enabled_vars.sql", "original_file_path": "macros\\enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0412164}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\enabled_vars_one_true.sql", "original_file_path": "macros\\enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0412164}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\fill_pass_through_columns.sql", "original_file_path": "macros\\fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0412164}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\fill_staging_columns.sql", "original_file_path": "macros\\fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0493612}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\fill_staging_columns.sql", "original_file_path": "macros\\fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0493612}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\first_value.sql", "original_file_path": "macros\\first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0493612}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\first_value.sql", "original_file_path": "macros\\first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0493612}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\first_value.sql", "original_file_path": "macros\\first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0493612}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_extract.sql", "original_file_path": "macros\\json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.057369}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\json_parse.sql", "original_file_path": "macros\\json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\max_bool.sql", "original_file_path": "macros\\max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\max_bool.sql", "original_file_path": "macros\\max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\max_bool.sql", "original_file_path": "macros\\max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\max_bool.sql", "original_file_path": "macros\\max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\percentile.sql", "original_file_path": "macros\\percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0656137}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\persist_pass_through_columns.sql", "original_file_path": "macros\\persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\pivot_json_extract.sql", "original_file_path": "macros\\pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\remove_prefix_from_columns.sql", "original_file_path": "macros\\remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\seed_data_helper.sql", "original_file_path": "macros\\seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\snowflake_seed_data.sql", "original_file_path": "macros\\snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\source_relation.sql", "original_file_path": "macros\\source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.0736325}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\source_relation.sql", "original_file_path": "macros\\source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\string_agg.sql", "original_file_path": "macros\\string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\string_agg.sql", "original_file_path": "macros\\string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\string_agg.sql", "original_file_path": "macros\\string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\string_agg.sql", "original_file_path": "macros\\string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\string_agg.sql", "original_file_path": "macros\\string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_add.sql", "original_file_path": "macros\\timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.081722}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_diff.sql", "original_file_path": "macros\\timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.090152}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_diff.sql", "original_file_path": "macros\\timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.090152}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_diff.sql", "original_file_path": "macros\\timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.090152}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_diff.sql", "original_file_path": "macros\\timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.090152}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\timestamp_diff.sql", "original_file_path": "macros\\timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.098159}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\union_data.sql", "original_file_path": "macros\\union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1063964}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\union_data.sql", "original_file_path": "macros\\union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1063964}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\union_relations.sql", "original_file_path": "macros\\union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1144042}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\fivetran_utils", "path": "macros\\union_relations.sql", "original_file_path": "macros\\union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1144042}, "macro.metrics.aggregate_primary_metric": {"unique_id": "macro.metrics.aggregate_primary_metric", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "aggregate_primary_metric", "macro_sql": "{% macro aggregate_primary_metric(aggregate, expression) %}\n    {{ return(adapter.dispatch('aggregate_primary_metric', 'metrics')(aggregate, expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__aggregate_primary_metric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__aggregate_primary_metric": {"unique_id": "macro.metrics.default__aggregate_primary_metric", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__aggregate_primary_metric", "macro_sql": "{% macro default__aggregate_primary_metric(aggregate, expression) %}\n    {% if aggregate == 'count' %}\n        {{ return(adapter.dispatch('metric_count', 'metrics')(expression)) }}\n    \n    {% elif aggregate == 'count_distinct' %}\n        {{ return(adapter.dispatch('metric_count_distinct', 'metrics')(expression)) }}\n    \n    {% elif aggregate == 'average' %}\n        {{ return(adapter.dispatch('metric_average', 'metrics')(expression)) }}\n    \n    {% elif aggregate == 'max' %}\n        {{ return(adapter.dispatch('metric_max', 'metrics')(expression)) }}\n       \n    {% elif aggregate == 'min' %}\n        {{ return(adapter.dispatch('metric_min', 'metrics')(expression)) }}\n    \n    {% elif aggregate == 'sum' %}\n        {{ return(adapter.dispatch('metric_sum', 'metrics')(expression)) }}\n    \n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Unknown aggregation style: \" ~ aggregate) %}  \n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_count", "macro.metrics.default__metric_count_distinct", "macro.metrics.default__metric_average", "macro.metrics.default__metric_max", "macro.metrics.default__metric_min", "macro.metrics.default__metric_sum"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_count": {"unique_id": "macro.metrics.default__metric_count", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_count", "macro_sql": "{% macro default__metric_count(expression) %}\n    count({{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_count_distinct": {"unique_id": "macro.metrics.default__metric_count_distinct", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_count_distinct", "macro_sql": "{% macro default__metric_count_distinct(expression) %}\n    count(distinct {{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_average": {"unique_id": "macro.metrics.default__metric_average", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_average", "macro_sql": "{% macro default__metric_average(expression) %}\n    avg({{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.redshift__metric_average": {"unique_id": "macro.metrics.redshift__metric_average", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "redshift__metric_average", "macro_sql": "{% macro redshift__metric_average(expression) %}\n    avg(cast({{ expression }} as float))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_max": {"unique_id": "macro.metrics.default__metric_max", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_max", "macro_sql": "{% macro default__metric_max(expression) %}\n    max({{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_min": {"unique_id": "macro.metrics.default__metric_min", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_min", "macro_sql": "{% macro default__metric_min(expression) %}\n    min({{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.default__metric_sum": {"unique_id": "macro.metrics.default__metric_sum", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\aggregate_primary_metric.sql", "original_file_path": "macros\\aggregate_primary_metric.sql", "name": "default__metric_sum", "macro_sql": "{% macro default__metric_sum(expression) %}\n    sum({{ expression }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.get_metric_relation": {"unique_id": "macro.metrics.get_metric_relation", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\get_metric_relation.sql", "original_file_path": "macros\\get_metric_relation.sql", "name": "get_metric_relation", "macro_sql": "{% macro get_metric_relation(ref_name) %}\n    {% if execute %}\n        {% set model_ref_node = graph.nodes.values() | selectattr('name', 'equalto', ref_name[0]) | first %}\n        {% set relation = api.Relation.create(\n            database = model_ref_node.database,\n            schema = model_ref_node.schema,\n            identifier = model_ref_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %} \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.get_metric_calendar": {"unique_id": "macro.metrics.get_metric_calendar", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\get_metric_relation.sql", "original_file_path": "macros\\get_metric_relation.sql", "name": "get_metric_calendar", "macro_sql": "{% macro get_metric_calendar(ref_name) %}\n    /*\n        TODO: this is HORRID.\n        Short version: How do we properly handle refs[0] for the metric's model, and the ref() syntax for the calendar table? \n    */\n\n    /*\n        Long version: even though the metric yml file has its model as a full ref\n\n        - name: slack_joiners\n        model: ref('dim_slack_users_2')\n\n        the refs array from the graph contains just the string, inside a second array:\n\n        {\n        \"fqn\":[\"joel_sandbox\",\"metrics\",\"slack_joiners\"],\n        \"unique_id\":\"metric.joel_sandbox.slack_joiners\",\n        \"time_grains\":[\"day\", \"week\", \"month\"],\n        \"dimensions\":[\"has_messaged\"],\n        \"resource_type\":\"metric\",\n        \"refs\":[\n            [\n                \"dim_slack_users_2\"\n            ]\n        ],\n        \"created_at\":1642578505.5324879\n        }\n\n\n        Whereas the calendar variable:\n        vars:\n            dbt_metrics_calendar_model: ref('all_days_extended_2')\n\n        comes through as the entire ref string (it hasn't been parsed or processed yet). \n        This splits on the ' character, takes the second element, and wraps it inside an array, \n        to have the same shape as get_metric_relation expects,\n        which is written to expect the metric's `model`.\n    */\n    \n    {% set split_ref_name = ref_name.split(\"'\")[1] %}\n    {% do return(metrics.get_metric_relation([split_ref_name])) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1227458}, "macro.metrics.get_metric_sql": {"unique_id": "macro.metrics.get_metric_sql", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\get_metric_sql.sql", "original_file_path": "macros\\get_metric_sql.sql", "name": "get_metric_sql", "macro_sql": "\n\n\n{%- macro get_metric_sql(metric, grain, dimensions, secondary_calculations, start_date, end_date) %}\n{%- if not execute %}\n    {%- do return(\"not execute\") %}\n{%- endif %}\n\n{%- if not metric %}\n    {%- do exceptions.raise_compiler_error(\"No metric provided\") %}\n{%- endif %}\n\n{%- if not grain %}\n    {%- do exceptions.raise_compiler_error(\"No date grain provided\") %}\n{%- endif %}\n\n{#-/* TODO: This refs[0][0] stuff is totally ick */#}\n{%- set model = metrics.get_metric_relation(metric.refs[0] if execute else \"\") %}\n{%- set calendar_tbl = metrics.get_metric_calendar(var('dbt_metrics_calendar_model', \"ref('dbt_metrics_default_calendar')\")) %}\n\n{#- /* TODO: Do I need to validate that the requested grain is defined on the metric? */ #}\n{#- /* TODO: build a list of failures and return them all at once*/ #}\n{%- for calc_config in secondary_calculations if calc_config.aggregate %}\n    {%- do metrics.validate_aggregate_coherence(metric.type, calc_config.aggregate) %}\n{%- endfor %}\n\n{#- /* TODO: build a list of failures and return them all at once*/ #}\n{%- for calc_config in secondary_calculations if calc_config.period %}\n    {%- do metrics.validate_grain_order(grain, calc_config.period) %}\n{%- endfor %}\n\n{%- set relevant_periods = [] %}\n{%- for calc_config in secondary_calculations if calc_config.period and calc_config.period not in relevant_periods %}\n    {%- set _ = relevant_periods.append(calc_config.period) %}\n{%- endfor -%}\n\nwith source_query as (\n\n    select\n        /* Always trunc to the day, then use dimensions on calendar table to achieve the _actual_ desired aggregates. */\n        /* Need to cast as a date otherwise we get values like 2021-01-01 and 2021-01-01T00:00:00+00:00 that don't join :( */\n        cast({{ dbt_utils.date_trunc('day', 'cast(' ~ metric.timestamp ~ ' as date)') }} as date) as date_day,\n        \n        {% for dim in dimensions %}\n            {%- if metrics.is_dim_from_model(metric, dim) -%}\n                 {{ dim }},\n            {% endif -%}\n\n        {%- endfor %}\n\n        {#- /*When metric.sql is undefined or '*' for a count, \n            it's unnecessary to pull through the whole table */ #}\n        {%- if metric.sql and metric.sql | replace('*', '') | trim != '' -%}\n            {{ metric.sql }} as property_to_aggregate\n        {%- elif metric.type == 'count' -%}\n            1 as property_to_aggregate /*a specific expression to aggregate wasn't provided, so this effectively creates count(*) */\n        {%- else -%}\n            {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric.name ~ \"`\") -%}  \n        {%- endif %}\n\n    from {{ model }}\n    where 1=1\n    {%- for filter in metric.filters %}\n        and {{ filter.field }} {{ filter.operator }} {{ filter.value }}\n    {%- endfor %}\n),\n\n spine__time as (\n     select \n        /* this could be the same as date_day if grain is day. That's OK! \n        They're used for different things: date_day for joining to the spine, period for aggregating.*/\n        date_{{ grain }} as period, \n        {% for period in relevant_periods %}\n            date_{{ period }},\n        {% endfor %}\n        {% for dim in dimensions if not metrics.is_dim_from_model(metric, dim) %}\n            {{ dim }},\n        {% endfor %}\n        date_day\n     from {{ calendar_tbl }}\n ),\n\n{%- for dim in dimensions -%}\n    {%- if metrics.is_dim_from_model(metric, dim) %}\n          \n        spine__values__{{ dim }} as (\n\n            select distinct {{ dim }}\n            from source_query\n\n        ),  \n    {% endif -%}\n\n\n{%- endfor %}\n\nspine as (\n\n    select *\n    from spine__time\n    {%- for dim in dimensions -%}\n\n        {%- if metrics.is_dim_from_model(metric, dim) %}\n            cross join spine__values__{{ dim }}\n        {%- endif %}\n    {%- endfor %}\n\n),\n\njoined as (\n    select \n        spine.period,\n        {% for period in relevant_periods %}\n        spine.date_{{ period }},\n        {% endfor %}\n        {% for dim in dimensions %}\n        spine.{{ dim }},\n        {% endfor %}\n\n        -- has to be aggregated in this CTE to allow dimensions coming from the calendar table\n        {{- metrics.aggregate_primary_metric(metric.type, 'source_query.property_to_aggregate') }} as {{ metric.name }},\n        {{ dbt_utils.bool_or('source_query.date_day is not null') }} as has_data\n\n    from spine\n    left outer join source_query on source_query.date_day = spine.date_day\n    {% for dim in dimensions %}\n        {%- if metrics.is_dim_from_model(metric, dim) %}\n            and (  source_query.{{ dim}} = spine.{{ dim }}\n                or source_query.{{ dim }} is null and spine.{{ dim }} is null\n            )\n        {%- endif %}\n    {% endfor %}\n\n    {#- /* Add 1 twice to account for 1) timeseries dim and 2) to be inclusive of the last dim */ #}\n    group by {{ range(1, (dimensions | length) + (relevant_periods | length) + 1 + 1) | join (\", \") }}\n\n),\n\nbounded as (\n    select \n        *,\n        {% if start_date %}cast('{{ start_date }}' as date){% else %} min(case when has_data then period end) over () {% endif %} as lower_bound,\n        {% if end_date %}cast('{{ end_date }}' as date){% else %} max(case when has_data then period end) over () {% endif %} as upper_bound\n    from joined \n),\n\nsecondary_calculations as (\n\n    select *\n        \n        {% for calc_config in secondary_calculations -%}\n\n            , {{ metrics.perform_secondary_calculation(metric.name, dimensions, calc_config) -}} as {{ metrics.generate_secondary_calculation_alias(calc_config, grain) }}\n\n        {% endfor %}\n\n    from bounded\n    \n),\n\nfinal as (\n    select\n        period\n        {% for dim in dimensions %}\n        , {{ dim }}\n        {% endfor %}\n        , coalesce({{ metric.name }}, 0) as {{ metric.name }}\n        {% for calc_config in secondary_calculations %}\n        , {{ metrics.generate_secondary_calculation_alias(calc_config, grain) }}\n        {% endfor %}\n\n    from secondary_calculations\n    where period >= lower_bound\n    and period <= upper_bound\n    order by {{ range(1, (dimensions | length) + 1 + 1) | join (\", \") }}\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_relation", "macro.metrics.get_metric_calendar", "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order", "macro.dbt_utils.date_trunc", "macro.metrics.is_dim_from_model", "macro.metrics.aggregate_primary_metric", "macro.dbt_utils.bool_or", "macro.metrics.perform_secondary_calculation", "macro.metrics.generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1387532}, "macro.metrics.is_dim_from_model": {"unique_id": "macro.metrics.is_dim_from_model", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\is_dim_from_model.sql", "original_file_path": "macros\\is_dim_from_model.sql", "name": "is_dim_from_model", "macro_sql": "{% macro is_dim_from_model(metric, dim_name) %}\n    {% if execute %}\n        -- For now, time dimensions have to be encoded in the meta tag. \n        -- If there's no meta config, then assume all dimensions belong to the main model.\n        {% if not metric['meta']['dimensions'] %}\n            {% do return(True) %}\n        {% endif %}\n\n        {% set model_dims = (metric['meta']['dimensions'] | selectattr('type', '==', 'model') | first)['columns'] %}\n        {% do return (dim_name in model_dims) %}\n    {% else %}\n        {% do return (False) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1387532}, "macro.metrics.metric": {"unique_id": "macro.metrics.metric", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\metric.sql", "original_file_path": "macros\\metric.sql", "name": "metric", "macro_sql": "{% macro metric(metric_name, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None) -%}\n    -- Need this here, since the actual ref is nested within loops/conditions:\n    -- depends on: {{ ref('dbt_metrics_default_calendar') }}\n    \n    {%- if not execute %}\n        {%- do return(\"not execute\") %}\n    {%- endif %}\n\n    {%- set metric = metrics.get_metric(metric_name) %}\n\n    {%- set sql = metrics.get_metric_sql(\n        metric=metric,\n        grain=grain,\n        dimensions=dimensions,\n        secondary_calculations=secondary_calculations,\n        start_date=start_date,\n        end_date=end_date\n    ) %}\n    ({{ sql }}) metric_subq\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric", "macro.metrics.get_metric_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1468525}, "macro.metrics.get_metric": {"unique_id": "macro.metrics.get_metric", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\metric.sql", "original_file_path": "macros\\metric.sql", "name": "get_metric", "macro_sql": "{% macro get_metric(metric_name) %}\n    {% if not execute %}\n        {% do return(None) %}\n    {% else %}\n    {% set metric_info = namespace(metric_id=none) %}\n    {% for metric in graph.metrics.values() %}\n        {% if metric.name == metric_name %}\n            {% set metric_info.metric_id = metric.unique_id %}\n        {% endif %}\n    {% endfor %}\n\n    {% if metric_info.metric_id is none %}\n        {% do exceptions.raise_compiler_error(\"Metric named '\" ~ metric_name ~ \"' not found\") %}\n    {% endif %}\n    \n\n    {% do return(graph.metrics[metric_info.metric_id]) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1468525}, "macro.metrics.generate_secondary_calculation_alias": {"unique_id": "macro.metrics.generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\generate_secondary_calculation_alias.sql", "original_file_path": "macros\\secondary_calculations\\generate_secondary_calculation_alias.sql", "name": "generate_secondary_calculation_alias", "macro_sql": "{% macro generate_secondary_calculation_alias(calc_config, grain) %}\n\n    {{ return(adapter.dispatch('generate_secondary_calculation_alias', 'metrics')(calc_config, grain)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1468525}, "macro.metrics.default__generate_secondary_calculation_alias": {"unique_id": "macro.metrics.default__generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\generate_secondary_calculation_alias.sql", "original_file_path": "macros\\secondary_calculations\\generate_secondary_calculation_alias.sql", "name": "default__generate_secondary_calculation_alias", "macro_sql": "{% macro default__generate_secondary_calculation_alias(calc_config, grain) %}\n    {% if calc_config.alias %}\n        {% do return(calc_config.alias) %}\n    {% endif %}\n    \n    {%- set calc_type = calc_config.calculation %}\n    {%- if calc_type == 'period_over_period' %}\n        {%- do return(calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n   \n    {%- elif calc_type == 'rolling' %}\n        {%- do return(\"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n    \n    {%- elif calc_type == 'period_to_date' %}\n        {%- do return(calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n\n    {%- else %}\n        {%- do exceptions.raise_compiler_error(\"Can't generate alias for unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %}  \n    {%- endif %}\n\n    {{- calc_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1548622}, "macro.metrics.perform_secondary_calculation": {"unique_id": "macro.metrics.perform_secondary_calculation", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\perform_secondary_calculation.sql", "original_file_path": "macros\\secondary_calculations\\perform_secondary_calculation.sql", "name": "perform_secondary_calculation", "macro_sql": "{% macro perform_secondary_calculation(metric_name, dimensions, calc_config) %}\n\n    {{ return(adapter.dispatch('perform_secondary_calculation', 'metrics')(metric_name, dimensions, calc_config)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__perform_secondary_calculation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1548622}, "macro.metrics.default__perform_secondary_calculation": {"unique_id": "macro.metrics.default__perform_secondary_calculation", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\perform_secondary_calculation.sql", "original_file_path": "macros\\secondary_calculations\\perform_secondary_calculation.sql", "name": "default__perform_secondary_calculation", "macro_sql": "{% macro default__perform_secondary_calculation(metric_name, dimensions, calc_config) %}\n    {%- set calc_type = calc_config.calculation %}\n    {%- set calc_sql = '' %}\n    \n    {%- if calc_type == 'period_over_period' %}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_over_period', 'metrics')(metric_name, dimensions, calc_config) %}\n   \n    {%- elif calc_type == 'rolling' %}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_rolling', 'metrics')(metric_name, dimensions, calc_config) %}\n    \n    {%- elif calc_type == 'period_to_date' %}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_to_date', 'metrics')(metric_name, dimensions, calc_config) %}\n    \n    {%- else %}\n        {%- do exceptions.raise_compiler_error(\"Unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %}  \n    {%- endif %}\n\n    {{- calc_sql }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__secondary_calculation_period_over_period", "macro.metrics.default__secondary_calculation_rolling", "macro.metrics.default__secondary_calculation_period_to_date"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1548622}, "macro.metrics.default__secondary_calculation_period_over_period": {"unique_id": "macro.metrics.default__secondary_calculation_period_over_period", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "name": "default__secondary_calculation_period_over_period", "macro_sql": "{% macro default__secondary_calculation_period_over_period(metric_name, dimensions, calc_config) %}\n    {% set calc_sql %}\n        lag(\n            {{- metric_name }}, {{ calc_config.interval -}}\n        ) over (\n            {% if dimensions -%}\n                partition by {{ dimensions | join(\", \") }} \n            {% endif -%}\n            order by period\n        )\n    {% endset %}\n    \n\n    {% if calc_config.comparison_strategy == 'difference' %}\n        {% do return (adapter.dispatch('metric_comparison_strategy_difference', 'metrics')(metric_name, calc_sql)) %}\n    \n    {% elif calc_config.comparison_strategy == 'ratio' %}\n        {% do return (adapter.dispatch('metric_comparison_strategy_ratio', 'metrics')(metric_name, calc_sql)) %}\n    \n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Bad comparison_strategy for period_over_period: \" ~ calc_config.comparison_strategy ~ \". calc_config: \" ~ calc_config) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_comparison_strategy_difference", "macro.metrics.default__metric_comparison_strategy_ratio"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1548622}, "macro.metrics.default__metric_comparison_strategy_difference": {"unique_id": "macro.metrics.default__metric_comparison_strategy_difference", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_difference", "macro_sql": "{% macro default__metric_comparison_strategy_difference(metric_name, calc_sql) %}\n    coalesce({{ metric_name }}, 0) - coalesce({{ calc_sql }}, 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1548622}, "macro.metrics.default__metric_comparison_strategy_ratio": {"unique_id": "macro.metrics.default__metric_comparison_strategy_ratio", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_ratio", "macro_sql": "{% macro default__metric_comparison_strategy_ratio(metric_name, calc_sql) %}\n    cast(coalesce({{ metric_name }}, 0) / nullif({{ calc_sql }}, 0) as {{ dbt_utils.type_float() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1630206}, "macro.metrics.period_over_period": {"unique_id": "macro.metrics.period_over_period", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_over_period.sql", "name": "period_over_period", "macro_sql": "{% macro period_over_period(comparison_strategy, interval, alias) %}\n\n    {% set missing_args = [] %}\n    {% if not comparison_strategy %}\n        {% set _ = missing_args.append(\"comparison_strategy\") %}\n    {% endif %}\n    {% if not interval %} \n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_over_period\",\n        \"comparison_strategy\": comparison_strategy,\n        \"interval\": interval,\n        \"alias\": alias\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1630206}, "macro.metrics.default__secondary_calculation_period_to_date": {"unique_id": "macro.metrics.default__secondary_calculation_period_to_date", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_to_date.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_to_date.sql", "name": "default__secondary_calculation_period_to_date", "macro_sql": "{% macro default__secondary_calculation_period_to_date(metric_name, dimensions, calc_config) %}\n    {%- set calc_sql %}\n        {{- adapter.dispatch('aggregate_primary_metric', 'metrics')(calc_config.aggregate, metric_name) -}}\n        over (\n            partition by date_{{ calc_config.period }}\n            {% if dimensions -%}\n                , {{ dimensions | join(\", \") }}\n            {%- endif %}\n            order by period\n            rows between unbounded preceding and current row\n        )\n    {%- endset %}\n\n    {%- do return (calc_sql) %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.aggregate_primary_metric", "macro.metrics.default__aggregate_primary_metric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1630206}, "macro.metrics.period_to_date": {"unique_id": "macro.metrics.period_to_date", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_period_to_date.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_period_to_date.sql", "name": "period_to_date", "macro_sql": "{% macro period_to_date(aggregate, period, alias) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if not period %}\n        {% set _ = missing_args.append(\"period\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_to_date') %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_to_date\",\n        \"aggregate\": aggregate,\n        \"period\": period,\n        \"alias\": alias\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.171033}, "macro.metrics.default__secondary_calculation_rolling": {"unique_id": "macro.metrics.default__secondary_calculation_rolling", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_rolling.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_rolling.sql", "name": "default__secondary_calculation_rolling", "macro_sql": "{% macro default__secondary_calculation_rolling(metric_name, dimensions, calc_config) %}\n    {% set calc_sql %}\n        {{ adapter.dispatch('aggregate_primary_metric', 'metrics')(calc_config.aggregate, metric_name) }}\n        over (\n            {% if dimensions -%}\n                partition by {{ dimensions | join(\", \") }} \n            {% endif -%}\n            order by period\n            rows between {{ calc_config.interval - 1 }} preceding and current row\n        )\n    {% endset %}\n\n    {% do return (calc_sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.aggregate_primary_metric", "macro.metrics.default__aggregate_primary_metric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.171033}, "macro.metrics.rolling": {"unique_id": "macro.metrics.rolling", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\secondary_calculation_rolling.sql", "original_file_path": "macros\\secondary_calculations\\secondary_calculation_rolling.sql", "name": "rolling", "macro_sql": "{% macro rolling(aggregate, interval, alias) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if not interval %}\n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"rolling\",\n        \"aggregate\": aggregate,\n        \"interval\": interval,\n        \"alias\": alias\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.171033}, "macro.metrics.validate_aggregate_coherence": {"unique_id": "macro.metrics.validate_aggregate_coherence", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "original_file_path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "name": "validate_aggregate_coherence", "macro_sql": "{% macro validate_aggregate_coherence(metric_aggregate, calculation_aggregate) %}\n    {% set allowlist = metrics.get_metric_allowlist()[metric_aggregate] %}\n\n    {% if (calculation_aggregate not in allowlist) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary aggregate \" ~ calculation_aggregate ~ \" when metric's aggregation is \" ~ metric_aggregate ~ \". Allowed options are \" ~ allowlist ~ \".\") %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1790326}, "macro.metrics.get_metric_allowlist": {"unique_id": "macro.metrics.get_metric_allowlist", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "original_file_path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "name": "get_metric_allowlist", "macro_sql": "{% macro get_metric_allowlist() %}\n    {{ return(adapter.dispatch('get_metric_allowlist', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1790326}, "macro.metrics.default__get_metric_allowlist": {"unique_id": "macro.metrics.default__get_metric_allowlist", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "original_file_path": "macros\\secondary_calculations\\validate_aggregate_coherence.sql", "name": "default__get_metric_allowlist", "macro_sql": "{% macro default__get_metric_allowlist() %}\n    {# Keys are the primary aggregation, values are the permitted aggregations to run in secondary calculations. #}\n    {% do return ({\n        \"average\": ['min', 'max'],\n        \"count\": ['min', 'max', 'sum', 'average'],\n        \"count_distinct\": ['min', 'max', 'sum', 'average'],\n        \"sum\": ['min', 'max', 'sum', 'average'],\n        \"max\": ['min', 'max', 'sum', 'average'],\n        \"min\": ['min', 'max', 'sum', 'average'],\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1790326}, "macro.metrics.validate_grain_order": {"unique_id": "macro.metrics.validate_grain_order", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_grain_order.sql", "original_file_path": "macros\\secondary_calculations\\validate_grain_order.sql", "name": "validate_grain_order", "macro_sql": "{% macro validate_grain_order(metric_grain, calculation_grain) %}\n    {% set grains = metrics.get_grain_order() %}\n    \n    {% if metric_grain not in grains or calculation_grain not in grains %}\n        {% set comma = joiner(\", \") %}\n        {% do exceptions.raise_compiler_error(\"Unknown grains: [\" ~ (comma() ~ metric_grain if metric_grain not in grains) ~ (comma() ~ calculation_grain if calculation_grain not in grains) ~ \"]\") %}\n    {% endif %}\n\n    {% set metric_grain_index = grains.index(metric_grain) %}\n    {% set calculation_grain_index = grains.index(calculation_grain) %}\n\n    {% if (calculation_grain_index < metric_grain_index) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary metric at \" ~ calculation_grain ~\"-level when metric is at \" ~ metric_grain ~ \"-level\") %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1870325}, "macro.metrics.get_grain_order": {"unique_id": "macro.metrics.get_grain_order", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_grain_order.sql", "original_file_path": "macros\\secondary_calculations\\validate_grain_order.sql", "name": "get_grain_order", "macro_sql": "{% macro get_grain_order() %}\n    {{ return(adapter.dispatch('get_grain_order', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1870325}, "macro.metrics.default__get_grain_order": {"unique_id": "macro.metrics.default__get_grain_order", "package_name": "metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\metrics", "path": "macros\\secondary_calculations\\validate_grain_order.sql", "original_file_path": "macros\\secondary_calculations\\validate_grain_order.sql", "name": "default__get_grain_order", "macro_sql": "{% macro default__get_grain_order() %}\n    {% do return (['day', 'week', 'month', 'quarter', 'year']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1870325}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.1952991}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2059658}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2059658}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2059658}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\maintenance_operation.sql", "original_file_path": "macros\\maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\concat.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2124858}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2205167}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2452214}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2537613}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2537613}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2537613}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2618294}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\dbt_utils\\sql\\get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2618294}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\etc\\assert_not_null.sql", "original_file_path": "macros\\etc\\assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2618294}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\etc\\assert_not_null.sql", "original_file_path": "macros\\etc\\assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2618294}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\spark_utils", "path": "macros\\snowplow\\convert_timezone.sql", "original_file_path": "macros\\snowplow\\convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1659694892.2618294}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\Aryan Verma\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "facebook_ads_source._fivetran_synced": {"unique_id": "facebook_ads_source._fivetran_synced", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "docs.md", "original_file_path": "models\\docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "facebook_ads_source.is_most_recent_record": {"unique_id": "facebook_ads_source.is_most_recent_record", "package_name": "facebook_ads_source", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics\\dbt_packages\\facebook_ads_source", "path": "docs.md", "original_file_path": "models\\docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it."}}, "exposures": {}, "metrics": {"metric.facebook_ads_metrics.facebook_ads__monthly_ads": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ads", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ads", "description": "Number of ads running monthly", "label": "Facebook Ads Monthly Number of Ads", "type": "count", "sql": "ad_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7524865}, "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ads_by_ad_set_name", "description": "Number of ads running monthly segmented by ad_set", "label": "Facebook Ads Monthly Number of Ads Segmented By ad_set", "type": "count", "sql": "ad_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_id"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7631547}, "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ads_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ads_by_campaign_name", "description": "Number of ads running monthly segmented by campaign", "label": "Facebook Ads Monthly Number of Ads Segmented By Campaign", "type": "count", "sql": "ad_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_id"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7631547}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_sets"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_sets", "description": "Number of ad_sets running monthly", "label": "Facebook Ads Monthly Number of ad_sets", "type": "count_distinct", "sql": "ad_set_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7686987}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_sets_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_sets_by_campaign_name", "description": "Number of ad_sets running monthly segmented by campaign", "label": "Facebook Ads Monthly Number of ad_sets Segmented By Campaign", "type": "count_distinct", "sql": "ad_set_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_id"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7686987}, "metric.facebook_ads_metrics.facebook_ads__monthly_campaigns": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_campaigns"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_campaigns", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_campaigns", "description": "Number of campaigns running monthly", "label": "Facebook Ads Monthly Number of Campaigns", "type": "count_distinct", "sql": "campaign_id", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7686987}, "metric.facebook_ads_metrics.facebook_ads__monthly_impressions": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_impressions", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_impressions", "description": "Monthly impressions per ad", "label": "Facebook Ads Monthly Number of Impressions", "type": "sum", "sql": "impressions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.776742}, "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_impressions_by_ad_name", "description": "Monthly impressions per ad", "label": "Facebook Ads Monthly Number of Impressions Segmented By Ad", "type": "sum", "sql": "impressions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.776742}, "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_impressions_by_ad_set_name", "description": "Monthly impressions per ad", "label": "Facebook Ads Monthly Number of Impressions Segmented By ad_set", "type": "sum", "sql": "impressions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad__set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7847419}, "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_impressions_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_impressions_by_campaign_name", "description": "Monthly impressions per ad", "label": "Facebook Ads Monthly Number of Impressions Segmented By ad_set", "type": "sum", "sql": "impressions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad__set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7847419}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_clicks", "description": "Monthly clicks on an ad", "label": "Facebook Ads Monthly Number of Ad Clicks", "type": "sum", "sql": "clicks", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7927475}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_clicks_by_ad_name", "description": "Monthly clicks on an ad segmented by ad name", "label": "Facebook Ads Monthly Number of Ad Clicks Segmented By Ad", "type": "sum", "sql": "clicks", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7927475}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_clicks_by_ad_set_name", "description": "Monthly clicks on an ad segmented by ad_set name", "label": "Facebook Ads Monthly Number of Ad Clicks Segmented By ad_set", "type": "sum", "sql": "clicks", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.7927475}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_clicks_by_campaign_name", "description": "Monthly clicks on an ad segmented by campaign name", "label": "Facebook Ads Monthly Number of Ad Clicks Segmented By Campaign", "type": "sum", "sql": "clicks", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8007412}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_clicks_by_ad_link"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_clicks_by_ad_link", "description": "Monthly clicks on an ad segmented by ad link", "label": "Facebook Ads Monthly Number of Ad Clicks Segmented By Ad Link", "type": "sum", "sql": "clicks", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["template_page_link"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8007412}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_spend", "description": "Monthly spend on ads", "label": "Facebook Ads Monthly Expenditure For Ads", "type": "sum", "sql": "spend", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8087423}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_spend_by_ad_name", "description": "Monthly spend on ads segmented by ad", "label": "Facebook Ads Monthly Expenditure For Ads Segmented By Ad", "type": "sum", "sql": "spend", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8087423}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_spend_by_ad_set_name", "description": "Monthly spend on ads segmented by ad_set", "label": "Facebook Ads Monthly Expenditure For Ads Segmented By ad_set", "type": "sum", "sql": "spend", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.816747}, "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_ad_spend_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_ad_spend_by_campaign_name", "description": "Monthly spend on ads segmented by campaign", "label": "Facebook Ads Monthly Expenditure For Ads Segmented By Campaign", "type": "sum", "sql": "spend", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.816747}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_click", "description": "cost per ad click", "label": "Facebook Ads Monthly Cost Per Ad Click", "type": "average", "sql": "cost_per_click", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8247416}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_click_by_ad_name", "description": "Monthly cost per ad click segmented by ad name", "label": "Facebook Ads Monthly Cost Per Ad Click Segmented By Ad", "type": "average", "sql": "cost_per_click", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8247416}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_click_by_ad_set_name", "description": "Monthly cost per ad click segmented by ad_set name", "label": "Facebook Ads Monthly Cost Per Ad Click Segmented By ad_set", "type": "average", "sql": "cost_per_click", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8247416}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_click_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_click_by_campaign_name", "description": "Monthly cost per ad click segmented by campaign name", "label": "Facebook Ads Monthly Cost Per Ad Click Segmented By Campaign", "type": "average", "sql": "cost_per_click", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8327413}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_impression", "description": "Monthly cost per ad impression", "label": "Facebook Ads Monthly Cost Per Ad Impression", "type": "average", "sql": "cost_per_impression", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8327413}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_impression_by_ad_name", "description": "Monthly cost per ad impression segmented by ad", "label": "Facebook Ads Monthly Cost Per Ad Impression Segmented By Ad", "type": "average", "sql": "cost_per_impression", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8407419}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_impression_by_ad_set_name", "description": "Monthly cost per ad impression segmented by ad_set", "label": "Facebook Ads Monthly Cost Per Ad Impression Segmented By ad_set", "type": "average", "sql": "cost_per_impression", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8407419}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_impression_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_impression_by_campaign_name", "description": "Monthly cost per ad impression segmented by campaign", "label": "Facebook Ads Monthly Cost Per Ad Impression Segmented By Campaign", "type": "average", "sql": "cost_per_impression", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8487413}, "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_click_through_rate", "description": "Monthly rate of users clicking on ad after viewing", "label": "Facebook Ads Monthly Click Through Rate", "type": "average", "sql": "click_through_rate", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8487413}, "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_click_through_rate_by_ad_name", "description": "Monthly rate of users clicking on ad after viewing segmented by ad name", "label": "Facebook Ads Monthly Click Through Rate Segmented By Ad", "type": "average", "sql": "click_through_rate", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8487413}, "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_click_through_rate_by_ad_set_name", "description": "Monthly rate of users clicking on ad after viewing segmented by ad_set name", "label": "Facebook Ads Monthly Click Through Rate Segmented By ad_set", "type": "average", "sql": "click_through_rate", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8567414}, "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_click_through_rate_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_click_through_rate_by_campaign_name", "description": "Monthly rate of users clicking on ad after viewing segmented by campaign name", "label": "Facebook Ads Monthly Click Through Rate Segmented By Campaign", "type": "average", "sql": "click_through_rate", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8567414}, "metric.facebook_ads_metrics.facebook_ads__monthly_conversions": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_conversions", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_conversions", "description": "Monthly number of ad conversions", "label": "Facebook Ads Monthly Number of Conversions", "type": "sum", "sql": "number_of_conversions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.864742}, "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_conversions_by_ad_name", "description": "Monthly number of ad conversions segmented by ad name", "label": "Facebook Ads Monthly Number of Conversions Segmented By Ad", "type": "sum", "sql": "number_of_conversions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.864742}, "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_conversions_by_ad_set_name", "description": "Monthly number of ad conversions segmented by ad_set name", "label": "Facebook Ads Monthly Number of Conversions Segmented By ad_set", "type": "sum", "sql": "number_of_conversions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.864742}, "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_conversions_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_conversions_by_campaign_name", "description": "Monthly number of ad conversions segmented by campaign name", "label": "Facebook Ads Monthly Number of Conversions Segmented By Campaign", "type": "sum", "sql": "number_of_conversions", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8727415}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_conversion", "description": "Monthly cost per ad conversion", "label": "Facebook Ads Monthly Cost Per Ad Conversion", "type": "average", "sql": "cost_per_conversion", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": [], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8727415}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_ad_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_conversion_by_ad_name", "description": "Monthly cost per ad conversion segmented by ad name", "label": "Facebook Ads Monthly Cost Per Ad Conversion Segmented by Ad", "type": "average", "sql": "cost_per_conversion", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8807423}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_ad_set_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "description": "Monthly cost per ad conversion segmented by ad_set name", "label": "Facebook Ads Monthly Cost Per Ad Conversion Segmented by ad_set", "type": "average", "sql": "cost_per_conversion", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["ad_set_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.8807423}, "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": {"fqn": ["facebook_ads_metrics", "metrics", "facebook_ads__monthly_cost_per_conversion_by_campaign_name"], "unique_id": "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name", "package_name": "facebook_ads_metrics", "root_path": "C:\\Users\\Aryan Verma\\Documents\\Houseware\\dbt_facebook_ads_metrics", "path": "metrics\\metrics.yml", "original_file_path": "models\\metrics\\metrics.yml", "name": "facebook_ads__monthly_cost_per_conversion_by_campaign_name", "description": "Monthly cost per ad conversion segmented by campaign name", "label": "Facebook Ads Monthly Cost Per Ad Conversion Segmented by Campaign", "type": "average", "sql": "cost_per_conversion", "timestamp": "date_day", "filters": [], "time_grains": ["month"], "dimensions": ["campaign_name"], "model": "ref('facebook_ads_main')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_metrics.facebook_ads_main"]}, "refs": [["facebook_ads_main"]], "metrics": [], "created_at": 1659694893.888746}}, "selectors": {}, "disabled": {}, "parent_map": {"model.facebook_ads_metrics.facebook_ads_main": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__creative_history", "source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS"], "model.facebook_ads_metrics.facebook_ads__monthly_ads": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_campaigns": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_conversions": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_impressions": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main", "model.metrics.dbt_metrics_default_calendar"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["source.facebook_ads_source.facebook_ads.account_history"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["source.facebook_ads_source.facebook_ads.ad_history"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["source.facebook_ads_source.facebook_ads.ad_set_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["source.facebook_ads_source.facebook_ads.basic_ad"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["source.facebook_ads_source.facebook_ads.campaign_history"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["source.facebook_ads_source.facebook_ads.creative_history"], "model.metrics.dbt_metrics_default_calendar": [], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ads": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_campaigns": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": ["model.facebook_ads_metrics.facebook_ads_main"], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": ["model.facebook_ads_metrics.facebook_ads_main"]}, "child_map": {"model.facebook_ads_metrics.facebook_ads_main": ["metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ads", "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_campaigns", "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate", "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_conversions", "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name", "metric.facebook_ads_metrics.facebook_ads__monthly_impressions", "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name", "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name", "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets", "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ads", "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_campaigns", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_conversions", "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name"], "model.facebook_ads_metrics.facebook_ads__monthly_ads": [], "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_campaigns": [], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": [], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_conversions": [], "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_impressions": [], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": [], "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": [], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads_metrics.facebook_ads_main", "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads_metrics.facebook_ads_main", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads_metrics.facebook_ads_main", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads_metrics.facebook_ads_main"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads_metrics.facebook_ads_main", "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads_metrics.facebook_ads_main", "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__account_history"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__basic_ad"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.metrics.dbt_metrics_default_calendar": ["model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set", "model.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets", "model.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_ads", "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_campaigns", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_conversions", "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name", "model.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": [], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": [], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": [], "source.facebook_ads_metrics.facebook_ads_source.AD_CONVERSIONS": ["model.facebook_ads_metrics.facebook_ads_main"], "source.facebook_ads_source.facebook_ads.account_history": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "source.facebook_ads_source.facebook_ads.ad_history": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "source.facebook_ads_source.facebook_ads.ad_set_history": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "source.facebook_ads_source.facebook_ads.basic_ad": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "source.facebook_ads_source.facebook_ads.campaign_history": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "source.facebook_ads_source.facebook_ads.creative_history": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "metric.facebook_ads_metrics.facebook_ads__monthly_ads": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ads_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_sets_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_campaigns": [], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions": [], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_impressions_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_clicks_by_ad_link": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_ad_spend_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_click_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_impression_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate": [], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_click_through_rate_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions": [], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_conversions_by_campaign_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_ad_set_name": [], "metric.facebook_ads_metrics.facebook_ads__monthly_cost_per_conversion_by_campaign_name": []}}